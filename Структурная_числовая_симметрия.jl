using Printf # –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @printf)
using CSV # –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV-—Ñ–∞–π–ª–∞–º–∏
using DataFrames # –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö DataFrame –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
using Base.Threads # –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
using ProgressMeter # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ N –Ω–∞ m —á–∞—Å—Ç–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö –ø–æ –¥–ª–∏–Ω–µ
function split_number_str(N::Integer, m::Integer)
s = string(N)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ N –≤ —Å—Ç—Ä–æ–∫—É

if N < 10 # –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 10 ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ –¥–æ –¥–ª–∏–Ω—ã m
s = lpad(s, m, '0')  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–≤–∞ –Ω—É–ª–∏ –¥–æ –¥–ª–∏–Ω—ã m
end

len = length(s)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
base_len = div(len, m)  # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
remainder = len % m  # –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ ‚Äî —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –±—É–¥—É—Ç –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ 1 —Å–∏–º–≤–æ–ª

parts = String[]  # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —á–∏—Å–ª–∞
idx = 1  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ

for i in 1:m  # –¶–∏–∫–ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Å—Ç–µ–π
current_len = base_len + (i <= remainder ? 1 : 0)  # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
push!(parts, s[idx:idx+current_len-1])  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤
idx += current_len  # –°–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
end

return parts  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —á–∏—Å–ª–∞
end

# –£–º–Ω–æ–∂–∞–µ—Ç —á–∞—Å—Ç—å —á–∏—Å–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –¥–ª–∏–Ω—É
function multiply_preserve_length(part::String, k::Integer)
num = parse(BigInt, part) * k  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—Ç—å –≤ —á–∏—Å–ª–æ –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ k
result = string(num)  # –û–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
return lpad(result, length(part), '0')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É, –¥–æ–±–∞–≤–ª—è—è –Ω—É–ª–∏ —Å–ª–µ–≤–∞
end

# –£–¥–∞–ª—è–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function remove_leading_zeros(s::String)
if all(c -> c == '0', s)  # –ï—Å–ª–∏ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω—É–ª–µ–π
return "0"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "0"
else
idx = findfirst(c -> c != '0', s)  # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ-–Ω—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª
return s[idx:end]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
end
end

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç PQ –∏ NK –ø–æ –Ω–∞—á–∞–ª—É –∏ –∫–æ–Ω—Ü—É
function compare_pq_nk(pq::String, nk::String)
if pq == nk  # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
return "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
end

min_len = min(length(pq), length(nk))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫
prefix_match = 0  # –°—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–ø–µ—Ä–µ–¥–∏
for i in 1:min_len  # –¶–∏–∫–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–∞—á–∞–ª–∞
pq[i] == nk[i] ? prefix_match += 1 : break  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏–ª–∏ –≤—ã—Ö–æ–¥–∏–º
end

suffix_match = 0  # –°—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–æ–Ω—Ü–∞
for i in 1:min_len  # –¶–∏–∫–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫–æ–Ω—Ü–∞
pq[end - i + 1] == nk[end - i + 1] ? suffix_match += 1 : break  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–ª–∏ –≤—ã—Ö–æ–¥–∏–º
end

if prefix_match > 0 && suffix_match > 0  # –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
return "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"
elseif prefix_match > 0  # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ"
elseif suffix_match > 0  # –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü
return "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü"
else  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
return "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
function check_algoritm(N::Integer, m::Integer, k::Integer)
N_str = string(N)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º N –≤ —Å—Ç—Ä–æ–∫—É
nk_str = string(N * k)  # –£–º–Ω–æ–∂–∞–µ–º N –Ω–∞ k –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

parts_str = split_number_str(N, m)  # –†–∞–∑–±–∏–≤–∞–µ–º N –Ω–∞ m —á–∞—Å—Ç–µ–π
multiplied_parts_str = [multiply_preserve_length(p, k) for p in parts_str]  # –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
pq_str = join(multiplied_parts_str)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
pq_clean = remove_leading_zeros(pq_str)  # –ß–∏—Å—Ç–∏–º PQ
nk_clean = remove_leading_zeros(nk_str)  # –ß–∏—Å—Ç–∏–º NK

result = compare_pq_nk(pq_clean, nk_clean)  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º PQ –∏ NK

return (  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ (NamedTuple) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –°–ß–°
N = N,  # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
m = m,  # –ß–∏—Å–ª–æ —á–∞—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Ä–∞–∑–±–∏—Ç–æ N
k = k,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–º–Ω–æ–∂–∞–ª–∏—Å—å —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞
parts = string(parts_str),  # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è —á–∏—Å–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏
multiplied_parts = string(multiplied_parts_str),  # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
PQ = pq_clean,  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π (–æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π)
NK = nk_clean,  # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ k (N * k) (–æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π)
result = result  # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ PQ –∏ NK (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü –∏ —Ç.–¥.)
)  # –ò—Ç–æ–≥–æ–≤—ã–π NamedTuple —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ N
end

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
function run_tests_parallel(start_N::Integer, stop_N::Integer, m::Integer, k::Integer)
results_df = DataFrame(  # –°–æ–∑–¥–∞—ë–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
N = Int[], # –ü–æ–ª–µ "N" ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
m = Int[], # –ü–æ–ª–µ "m" ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
k = Int[], # –ü–æ–ª–µ "k" ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
parts = String[], # –ü–æ–ª–µ "parts" ‚Äî —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞)
multiplied_parts = String[], # –ü–æ–ª–µ "multiplied_parts" ‚Äî —Å—Ç—Ä–æ–∫–∏ (—É–º–Ω–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
PQ = String[], # –ü–æ–ª–µ "PQ" ‚Äî —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ —É–º–Ω–æ–∂–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
NK = String[], # –ü–æ–ª–µ "NK" ‚Äî —Å—Ç—Ä–æ–∫–∞ N * k
result = String[] # –ü–æ–ª–µ "result" ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ü–µ–Ω–∫–æ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
)

count_full = Atomic{Int}(0)  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
count_partial_start = Atomic{Int}(0)  # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
count_partial_end = Atomic{Int}(0)  # –¢–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü
count_partial_both = Atomic{Int}(0)  # –ò –Ω–∞—á–∞–ª–æ, –∏ –∫–æ–Ω–µ—Ü
count_none = Atomic{Int}(0)  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

@showprogress "üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º N ‚àà [$start_N, $stop_N], m = $m, k = $k" for N in start_N:stop_N  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
res = check_algoritm(N, m, k)  # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ N

Threads.atomic_add!(count_full, res.result == "‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" ? 1 : 0)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
Threads.atomic_add!(count_partial_start, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ)
Threads.atomic_add!(count_partial_end, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü)
Threads.atomic_add!(count_partial_both, res.result == "üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)
Threads.atomic_add!(count_none, res.result == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π" ? 1 : 0) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

push!(results_df, [  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É —á–∏—Å–ª—É N –≤ DataFrame
res.N # –ò—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ N
res.m # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π m
res.k # –ú–Ω–æ–∂–∏—Ç–µ–ª—å k
res.parts # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
res.multiplied_parts  # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
res.PQ # –†–µ–∑—É–ª—å—Ç–∞—Ç PQ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–æ—á–∏—â–µ–Ω–Ω—ã–π)
res.NK # –†–µ–∑—É–ª—å—Ç–∞—Ç NK = N * k (–æ—á–∏—â–µ–Ω–Ω—ã–π)
res.result # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –ø–æ–ª–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ / –Ω–µ—Ç
])
end

full = count_full[] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
partial_start = count_partial_start[] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞
partial_end = count_partial_end[] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ü–∞
partial_both = count_partial_both[] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
none = count_none[] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

println("\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV...") # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
CSV.write("results.csv", results_df)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª CSV

open("statistics.txt", "w") do io  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
write(io, "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è —á–∏—Å–ª–æ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è\n")
write(io, "=========================================\n")
write(io, "–î–∏–∞–ø–∞–∑–æ–Ω N: [$start_N, $stop_N]\n")
write(io, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π m = $m\n")
write(io, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å k = $k\n")
write(io, "-----------------------------------------\n")
write(io, "  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $full\n")
write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: $partial_both\n")
write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ: $partial_start\n")
write(io, "  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü: $partial_end\n")
write(io, "  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $none\n")
write(io, "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É ‚Äî –≤ 'results.csv'\n")
end

println("\nüìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:") # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
@printf("  ‚úÖ –ü–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", full) # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞—é—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü: %d\n", partial_both) # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ: %d\n", partial_start) # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞
@printf("  üîÑ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—Ü: %d\n", partial_end) # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ü–∞
@printf("  ‚ùå –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d\n", none) # –ü–µ—á–∞—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
println("\nüìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'statistics.txt'") # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
println("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results.csv'") # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

return results_df  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (DataFrame)
end

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
start_N = 1 # –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
stop_N = 10000000 # –ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
m = 2 # –ß–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ
k = 7 # –ú–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–º–Ω–æ–∂–∞—é—Ç—Å—è —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests_parallel(start_N, stop_N, m, k)  # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –°–ß–°
